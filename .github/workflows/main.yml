name: Docker Build, Push and Test Flask App

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          # Utilisation directe du secret DOCKER_USERNAME pour le nom d'utilisateur Docker Hub
          IMAGE_NAME=docker.io/${{ secrets.DOCKER_USERNAME }}/project-d777dc16-4894-4625-a1f2-d7f21dc82d84
          IMAGE_TAG=${{ github.sha }}

          # NOUVEAU: Afficher le Dockerfile avant le build pour le diagnostic
          echo "--- Contenu du Dockerfile utilisé pour le build ---"
          cat Dockerfile
          echo "---------------------------------------------------"

          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker push $IMAGE_NAME:$IMAGE_TAG

          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest

  test-image:
    needs: build-and-publish
    runs-on: ubuntu-latest

    steps:
      - name: Pull Docker image
        run: |
          # Utilisation directe du secret DOCKER_USERNAME pour le nom d'utilisateur Docker Hub
          IMAGE_NAME=docker.io/${{ secrets.DOCKER_USERNAME }}/project-d777dc16-4894-4625-a1f2-d7f21dc82d84
          IMAGE_TAG=${{ github.sha }}
          docker pull $IMAGE_NAME:$IMAGE_TAG
          echo "Image $IMAGE_NAME:$IMAGE_TAG pulled successfully."

      - name: Run Docker container for testing Flask app
        id: run_container
        run: |
          # NOUVEAU: Activer le mode débogage du shell
          set -x
          # Utilisation directe du secret DOCKER_USERNAME pour le nom d'utilisateur Docker Hub
          IMAGE_NAME=docker.io/${{ secrets.DOCKER_USERNAME }}/project-d777dc16-4894-4625-a1f2-d7f21dc82d84
          IMAGE_TAG=${{ github.sha }}
          docker run -d --name test-app -p 8080:5000 $IMAGE_NAME:$IMAGE_TAG
          echo "Conteneur 'test-app' démarré sur le port 8080 du runner (mappé au port 5000 du conteneur)."
          echo "container_id=$(docker ps -aqf "name=test-app")" >> $GITHUB_OUTPUT
          # NOUVEAU: Attendre un court instant pour que le conteneur démarre et produise des logs
          sleep 5
          # NOUVEAU: Afficher les logs du conteneur de manière explicite
          echo "--- Début des logs du conteneur 'test-app' ---"
          docker logs test-app
          echo "--- Fin des logs du conteneur 'test-app' ---"
          # NOUVEAU: Désactiver le mode débogage du shell
          set +x

      - name: Wait for Flask application to start and test response
        run: |
          echo "Attente du démarrage de l'application Flask..."
          HEALTH_URL="http://localhost:8080/"
          MAX_RETRIES=15
          RETRY_DELAY=5

          for i in $(seq 1 $MAX_RETRIES); do
            printf "Tentative %d/%d: Vérification de %s\n" "$i" "$MAX_RETRIES" "$HEALTH_URL"
            RESPONSE=$(curl --fail -s $HEALTH_URL)
            if [[ "$?" -eq 0 ]]; then
              echo "Application est saine et répond !"
              if [[ "$RESPONSE" == *"Hello from Flask!"* ]]; then
                echo "Test réussi : 'Hello from Flask!' trouvé dans la réponse."
                exit 0
              else
                echo "Test échoué : Attendu 'Hello from Flask!' mais obtenu '$RESPONSE'."
                exit 1
              fi
            else
              printf "Application pas encore prête ou erreur de connexion. Nouvelle tentative dans %d secondes...\n" "$RETRY_DELAY"
              sleep $RETRY_DELAY
            fi
          done
          echo "L'application n'est pas devenue saine dans le délai imparti. Vérifiez les logs du conteneur pour les erreurs."
          # La ligne docker logs test-app est maintenant affichée plus tôt dans l'étape "Run Docker container..."
          exit 1

      - name: Clean up Docker container
        if: always()
        run: |
          echo "Arrêt et suppression du conteneur 'test-app'..."
          docker stop test-app || true
          docker rm test-app || true
          echo "Conteneur nettoyé."
